
// require the library, main export is a function
const simpleGit = require('simple-git');
const fs = require('fs');
const tmp = require('tmp');
const axios = require('axios');

async function main() {

	var issues = [];
	// Get all new issues

        var opts = {
                auth: {
                        username: 'dwfbot',
                        password: process.env.GH_TOKEN,
                },
		params: {
			accept: "application/vnd.github.v3+json",
			labels: 'new,check',
			state: 'open'
		}
        };
        try {
                var resp = await axios.get(`https://api.github.com/repos/distributedweaknessfiling/test-bot-repo/issues`, opts);    
		issues = resp['data']


        } catch(err) {
		console.log("A bad thing happened");
                console.log(err);
                return;
        }

	// If there are new issues

	if (issues.length == 0) {
		// If there are no issues, just bail
		return;
	}

	// Extract CVE json details

	for (var i in issues) {

		var lines = issues[i]['body'].split(/\r\n|\n|\r/);
		var comments_url = issues[i]['comments_url'];

		var cve_json = ""
		var found_json = false;

		for (var l in lines) {
			if (lines[l] == "--- CVE JSON ---") {
				if (found_json == true) {
					found_json = false;
				} else {
					found_json = true;
				}
			} else if (found_json == true) {
				cve_json = cve_json + lines[l];
			}
		}
		console.log(`JSON to write ${cve_json}`);

		// Checkout CVE repo

		var tmpObj = tmp.dirSync({unsafeCleanup: true});
		var tmpDir = tmpObj.name;

		var git = simpleGit();
		await git.clone('https://github.com/distributedweaknessfiling/test-bot-repo.git', tmpDir)

		var gitrepo = simpleGit(tmpDir);
		process.chdir(tmpDir);

		// Get the next CVE ID

		var files = fs.readdirSync('2021');
		files.sort();
		var last_file = files[files.length - 1];
		id_num = Number((last_file.split('.')[0]).split('-')[2]);
		next_id = id_num + 1;
		next_cve = `CVE-2021-${next_id}`;
		next_file = `2021/CVE-2021-${next_id}.json`;

		// Write CVE json to CVE file

		// Turn the json string into data, then back to json
		// So we can format it pretty
		var cve_data = JSON.parse(cve_json);
		var json_data = JSON.stringify(cve_data, null, '  ');

		fs.writeFileSync(next_file, json_data);

		// Commit file
		await gitrepo.add(next_file);
		await gitrepo.commit("Add a CVE");
		await gitrepo.push();

		tmpObj.removeCallback();

		// Update the issue summary, add a comment, and remove label
		var body = {
			body: `This issue has been assigned ${next_cve}`,
		};
		var opts = {
			headers: { accept: 'application/json' },
			auth: {
				username: 'dwfbot',
				password: process.env.GH_TOKEN,
			}
		};
		try {
			var resp = await axios.post(comments_url, body, opts);    
			console.log(resp)

		} catch(err) {
			console.log("A bad thing happened");
			console.log(err);
			return
		}
		// Modify the title
		// Remove new label
		// If the issue is a candidate, add the candidate label
	}

}

if (require.main === module) {
  main();
}
